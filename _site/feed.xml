<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-01T17:39:25+08:00</updated><id>http://localhost:4000/</id><title type="html">Thinking Tech</title><author><name>hylinux</name></author><entry><title type="html">如何使用WorkManager执行后台任务(下)</title><link href="http://localhost:4000/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8WorkManager%E6%89%A7%E8%A1%8C%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1(%E4%B8%8B)" rel="alternate" type="text/html" title="如何使用WorkManager执行后台任务(下)" /><published>2018-10-01T00:00:00+08:00</published><updated>2018-10-01T00:00:00+08:00</updated><id>http://localhost:4000/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8WorkManager%E6%89%A7%E8%A1%8C%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1(%E4%B8%8B)</id><content type="html" xml:base="http://localhost:4000/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8WorkManager%E6%89%A7%E8%A1%8C%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1(%E4%B8%8B)">&lt;h4 id=&quot;0x00-workmanager的高级用法&quot;&gt;0x00 WorkManager的高级用法&lt;/h4&gt;

&lt;p&gt;在上一文中已经了解到&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;的基本用法之后，今天来看看它的一些高级用法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;链式任务调用&lt;/li&gt;
  &lt;li&gt;唯一任务序列&lt;/li&gt;
  &lt;li&gt;传递参数和获取返回值&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;0x01-链式任务chained-tasks&quot;&gt;0x01 链式任务(Chained tasks)&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;在执行多个工作任务的时候，可以指定执行顺序。假设一个应用程序中有3个&lt;code class=&quot;highlighter-rouge&quot;&gt;OneTimeWorkRequest&lt;/code&gt;对象：&lt;code class=&quot;highlighter-rouge&quot;&gt;workA&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;workB&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;workC&lt;/code&gt;。这几个任务需要按照顺序执行，那么可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager.beginWith()&lt;/code&gt;方法加入&lt;code class=&quot;highlighter-rouge&quot;&gt;workA&lt;/code&gt;，这时候会返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkContinuation&lt;/code&gt;对象，它定义了工作任务的执行序列。然后通过它再调用&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkContinuation.then()&lt;/code&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;workB&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;workC&lt;/code&gt;加入到执行队列中，最后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager.enqueue()&lt;/code&gt;方法。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WorkManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Note: WorkManager.beginWith() returns a
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// WorkContinuation object; the following calls are
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// to WorkContinuation methods
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// FYI, then() returns a new WorkContinuation instance
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;会按照指定的顺序来执行&lt;code class=&quot;highlighter-rouge&quot;&gt;workA&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;workB&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;workC&lt;/code&gt;。如果其中有一个工作任务执行的时候返回&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker.Result.FAILURE&lt;/code&gt;，那么整个执行序列就会停止。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager.beginWith()&lt;/code&gt;方法可以传递多个&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;对象，表示可以&lt;strong&gt;并行执行&lt;/strong&gt;的任务组，然后再调用&lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt;方法。当这并行任务组都执行完之后才会执行接下来&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;中的工作任务。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WorkManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 首先，并行执行workA1,workA2,workA3这三个任务
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workA1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workA2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workA3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 当三个任务都完成之后, 开始执行workB:
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 最后再并行执行 workC1,workC2
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workC1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workC2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkContinuation.combine()&lt;/code&gt;方法创建更加复杂的链接任务调用序列。它可以将两个&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkContinuation&lt;/code&gt;对象合并，假设要调用如下的任务序列：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/workcontinuation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;chain1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;chain2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;chain3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkContinuation&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chain3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个链式执行顺序是：子链 A-&amp;gt;B 与子链 C-&amp;gt;D 并行执行的，&lt;code class=&quot;highlighter-rouge&quot;&gt;workA&lt;/code&gt;执行后再执行&lt;code class=&quot;highlighter-rouge&quot;&gt;workB&lt;/code&gt;，以及&lt;code class=&quot;highlighter-rouge&quot;&gt;workC&lt;/code&gt;执行后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;workD&lt;/code&gt; ；然后等待 &lt;code class=&quot;highlighter-rouge&quot;&gt;workB&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;workD&lt;/code&gt;都执行完，最后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;workE&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;需要注意的是，&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;无法保证两个子链的执行顺序，有可能&lt;code class=&quot;highlighter-rouge&quot;&gt;chain1&lt;/code&gt;比&lt;code class=&quot;highlighter-rouge&quot;&gt;chain2&lt;/code&gt;快，也有可能是&lt;code class=&quot;highlighter-rouge&quot;&gt;chain1&lt;/code&gt;比&lt;code class=&quot;highlighter-rouge&quot;&gt;chain2&lt;/code&gt;慢。&lt;/p&gt;

&lt;h4 id=&quot;0x02-唯一任务序列unique-work-sequences&quot;&gt;0x02 唯一任务序列(Unique work sequences)&lt;/h4&gt;

&lt;p&gt;在应用程序开发中，可能会多次把同一个链式任务添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;中，但希望只有一个链式任务在执行，这时候可以使用唯一任务序列对链式任务指定处理规则。假设，做一个下载文件操作，对一个文件下载链接，我们不需要重复下载，只需要添加一次，后面再添加这个任务，就忽略掉，因为我们不希望重复多次下载同一个文件。所以当添加两个同样名称为”download”操作任务时，对于唯一任务序列来说，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;ExistingWorkPolicy&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;REPLACE&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt; KEEP&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;APPEND&lt;/code&gt;，来指定添加的策略。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;REPLACE：新任务将替换旧的&lt;/li&gt;
  &lt;li&gt;KEEP：新任务会被丢弃，旧的任务会被保持&lt;/li&gt;
  &lt;li&gt;APPEND：追加，旧任务执行之后再执行新的任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;beginUniqueWork()&lt;/code&gt;方法可以创建任务序列，并且可以指定唯一的一个名称(name)。然后再&lt;code class=&quot;highlighter-rouge&quot;&gt;ExistingWorkPolicy&lt;/code&gt;指定任务的替换策略&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WorkContinuation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWorkManager&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginUniqueWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;download&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;ExistingWorkPolicy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;OneTimeWorkRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CleanupWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;0x03-传递参数和获取返回值&quot;&gt;0x03 传递参数和获取返回值&lt;/h4&gt;

&lt;p&gt;任务执行可以传递参数以及获取到任务执行的结果。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequst.Builder.setInputData()&lt;/code&gt;方法传递一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt;对象，它是key-value形式的对象，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Data.Builder&lt;/code&gt;来创建。在&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;类中可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker.getInputData()&lt;/code&gt;获取到参数。&lt;/p&gt;

&lt;p&gt;同样地，在&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;中可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker.setOutputData()&lt;/code&gt;设置一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt;对象的返回值。要获取到这个返回值就通过&lt;code class=&quot;highlighter-rouge&quot;&gt;LiveData&amp;lt;WorkStatus&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;举个栗子：&lt;/p&gt;

&lt;p&gt;有一个下载任务，在&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;中获取传递过来的参数url，然后执行下载，最后设置下载结果。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// the result key:
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;KEY_RESULT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;result&quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DownloadWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkerParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 获取参数
&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInputData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 执行下载
&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 设置下载结果
&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_RESULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toWorkData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setOutputData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 任务执行成功
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUCCESS&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;传递参数&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 构造下载链接参数
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;urlData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://developer.android.com/images/topic/libraries/architecture/workmanager-chain.svg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toWorkData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 构造WorkRequest并传递下载参数
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;downloadWork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneTimeWorkRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DownloadWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setInputData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 交给WorkManager执行任务
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downloadWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkStatus&lt;/code&gt;获取返回值&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WorkManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getStatusById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downloadWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;myResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_RESULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;myDefaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// ... do something with the result ...
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;0x04-引用&quot;&gt;0x04 引用&lt;/h4&gt;

&lt;p&gt;https://developer.android.com/topic/libraries/architecture/workmanager/advanced&lt;/p&gt;

&lt;p&gt;https://developer.android.com/reference/androidx/work/ExistingWorkPolicy&lt;/p&gt;

&lt;p&gt;http://clmirror.storage.googleapis.com/codelabs/android-workmanager/index.html?index=..%2F..%2Findex#0&lt;/p&gt;</content><author><name>hylinux</name></author><summary type="html">0x00 WorkManager的高级用法</summary></entry><entry><title type="html">如何使用WorkManager执行后台任务(上)</title><link href="http://localhost:4000/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8WorkManager%E6%89%A7%E8%A1%8C%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1-%E4%B8%8A" rel="alternate" type="text/html" title="如何使用WorkManager执行后台任务(上)" /><published>2018-09-29T00:00:00+08:00</published><updated>2018-09-29T00:00:00+08:00</updated><id>http://localhost:4000/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8WorkManager%E6%89%A7%E8%A1%8C%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1(%E4%B8%8A)</id><content type="html" xml:base="http://localhost:4000/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8WorkManager%E6%89%A7%E8%A1%8C%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1-%E4%B8%8A">&lt;h4 id=&quot;0x00-简述&quot;&gt;0x00 简述&lt;/h4&gt;

&lt;p&gt;WorkManager 是 Android Jetpack中的一部分，它主要是封装了 Android 后台任务的调度逻辑。在前文&lt;a href=&quot;https://wecode.xyz/Android%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97&quot;&gt;《Android后台任务处理指南》&lt;/a&gt;一文中知道，WorkManager 是高级 API，它实际是封装了&lt;a href=&quot;https://developer.android.com/reference/android/app/job/JobScheduler.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JobScheduler&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/firebase/firebase-jobdispatcher-android#user-content-firebase-jobdispatcher-&quot;&gt;Firebase JobDispatcher&lt;/a&gt;, 和 &lt;a href=&quot;https://developer.android.com/reference/android/app/AlarmManager.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AlarmManager&lt;/code&gt;&lt;/a&gt; 底层的使用，提供了简单且灵活易用的API，它有很多优势：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持异步一次性或周期任务&lt;/li&gt;
  &lt;li&gt;支持网络、存储空间以及电量状态等约束&lt;/li&gt;
  &lt;li&gt;可使用链式的调用方式来执行任务，也包括并行任务处理&lt;/li&gt;
  &lt;li&gt;一个工作任务的执行结果可以作为下一个任务的输入&lt;/li&gt;
  &lt;li&gt;兼容API 14 以上&lt;/li&gt;
  &lt;li&gt;可以支持Google play services&lt;/li&gt;
  &lt;li&gt;支持LiveData&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;0x01-理论篇重要的类&quot;&gt;0x01 理论篇——重要的类&lt;/h4&gt;

&lt;p&gt;WorkManager库中有一些非常重要的类，这些类帮助你构建后台执行的工作任务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;：这是一个抽象类，它表示一个工作任务，继承这个类实现&lt;code class=&quot;highlighter-rouge&quot;&gt;doWork()&lt;/code&gt;方法，这里就是实现执行任务的主要逻辑。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;：表示一个工作任务请求，指定执行哪个&lt;code class=&quot;highlighter-rouge&quot;&gt;Work&lt;/code&gt;，它还可以设置任务执行的约束条件。每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;都有一个自动生成的唯一ID。使用这个ID可以取消任务的执行，或者取得当前任务的执行状态。&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;也是一个抽象类，使用的时候是框架库中提供的子类&lt;code class=&quot;highlighter-rouge&quot;&gt;OneTimeWorkRequest&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;PeriodicWorkRequest&lt;/code&gt;类，分别代表&lt;strong&gt;一次性任务和周期任务&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest.Builder&lt;/code&gt;：这是一个创建工作任务请求的辅助工具类。它有两个具体的实现：&lt;code class=&quot;highlighter-rouge&quot;&gt;OneTimeWorkRequest.Builder&lt;/code&gt;类和&lt;code class=&quot;highlighter-rouge&quot;&gt;PeriodicWorkRequest.Builder&lt;/code&gt;类，可以分别创建相应的任务请求实例。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Constraints&lt;/code&gt;：它表示工作任务执行的约束条件。指的是在哪一些系统条件下（例如只有网络连接情况下），这个工作任务会被执行。同样地，创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Constraints&lt;/code&gt;也有&lt;code class=&quot;highlighter-rouge&quot;&gt;Builder&lt;/code&gt;方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;Constraints.Builder&lt;/code&gt;。约束类是可以在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest.Builder&lt;/code&gt; 创建的时候进行传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;：工作任务管理器，它是用于管理工作任务的请求队列的类。通过它可以把一个&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;加入到任务队列中，然后根据系统的资源和约束条件对工作任务进行调度。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkStatus&lt;/code&gt;：工作状态类，它包含了工作任务当前的状态信息。&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt; 为每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;都提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;对象，而&lt;code class=&quot;highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;对象又持有&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkStatus&lt;/code&gt;信息，因此通过&lt;code class=&quot;highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;可以监听到当前任务的状态信息，并且获取到任务结束后的执行结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过上面的描述，可以简单的画出下面的关系图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/work-manager-relation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;0x02-实践篇工作流&quot;&gt;0x02 实践篇——工作流&lt;/h4&gt;

&lt;p&gt;假设我们在开发一个图片相关的APP，这个应用需要期地压缩它存储的图片。我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;来实现这个需求。这种情况，我们不关心压缩任务什么时候开始，只要开启一个压缩任务，其他的就交给&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;定义Worker&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们首先要定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Worker&lt;/code&gt;类，并重写&lt;code class=&quot;highlighter-rouge&quot;&gt;doWork()&lt;/code&gt;方法，这里定义了如何执行任务的具体逻辑。例如在此例子中，&lt;code class=&quot;highlighter-rouge&quot;&gt;myCompress()&lt;/code&gt;就是具体的执行任务的逻辑。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompressWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkerParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Do the work here--in this case, compress the stored images.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// In this example no parameters are passed; the task is
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// assumed to be &quot;compress the whole library.&quot;
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;myCompress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Indicate success or failure with your return value:
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUCCESS&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// (Returning RETRY tells WorkManager to try this task again
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// later; FAILURE says not to try again.)
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doWork()&lt;/code&gt; 执行后还可以返回执行的结果：&lt;code class=&quot;highlighter-rouge&quot;&gt;Result.SUCCESS&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Result.FAILURE&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Result.RETRY&lt;/code&gt; 分别表示&lt;strong&gt;成功&lt;/strong&gt;、&lt;strong&gt;失败&lt;/strong&gt;、&lt;strong&gt;重试&lt;/strong&gt;。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;创建WorkRequest&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;的子类，根据具体业务创建对应的请求实例。例如本例中，使用一次性任务来构建请求。然后把任务请求加入到&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;管理的队列中。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;compressionWork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneTimeWorkRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompressWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WorkManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compressionWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样这个任务就交给&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;了，任务管理者根据当前系统情况（是否充电、网络状态等等）对任务进行调度。如果没有给&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;指定约束条件，那么这个任务会马上执行。如果需要得到这个任务的状态，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;LiveData&amp;lt;WorkStatus&amp;gt;&lt;/code&gt;来监听。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WorkManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getStatusById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compressionWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycleOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workStatus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// Do something with the status
&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workStatus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;任务约束&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以给一个任务指定约束条件。例如，可以在设备空闲的时候、或者充电的时候执行任务。这种情况，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Constraints.Builder&lt;/code&gt;来创建一个约束条件实例，然后传递到&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;中。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Create a Constraints object that defines when the task should run
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;myConstraints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Constraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setRequiresDeviceIdle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setRequiresCharging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Many other constraints are available, see the
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Constraints.Builder reference
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...then create a OneTimeWorkRequest that uses those constraints
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;compressionWork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneTimeWorkRequestBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompressWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后，还是调用&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;enqueue&lt;/code&gt;方法将&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;加入队列。这时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;在执行任务的时候就会考虑约束条件的情况。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;取消任务&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;取消任务需要一个任务ID，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt;来获取。然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;cancelWorkById&lt;/code&gt;方法来取消任务的执行。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;compressionWorkId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compressionWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WorkManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancelWorkById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compressionWorkId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;给任务设置Tag&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以给一组任务设置一个Tag。在创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;WorkRequest&lt;/code&gt; 的时候，可以执行给它指定一个Tag；而另一个任务请求也可以设置相同的Tag。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cacheCleanupTask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OneTimeWorkRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCacheCleanupWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one-tag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;loadImageTask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OneTimeWorkRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyImageLoadWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one-tag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;提供了很多有用的API操作这些相同Tag的任务。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager.cancelAllWorkByTag()&lt;/code&gt; 可以取消具有相同Tag的一组任务；还可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager.getStatusesByTag()&lt;/code&gt;获取一组任务的状态列表。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;周期任务&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有些业务场景是需要重复执行一个任务的。例如，在一个图片应用中，可能会有一个定期检查需要压缩图片的任务。这时候可使用到 &lt;code class=&quot;highlighter-rouge&quot;&gt;PeriodicWorkRequest.Builder&lt;/code&gt; 来创建一个周期任务。跟一次性任务一样，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager.enqueue()&lt;/code&gt; 方法加入到工作任务队列中。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;photoCheckBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PeriodicWorkRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhotoCheckWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOURS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...if you want, you can apply constraints to the builder here...
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Create the actual work object:
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;photoCheckWork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photoCheckBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Then enqueue the recurring task:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photoCheckWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来的事情就交给 &lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt; 了。&lt;/p&gt;

&lt;h4 id=&quot;0x03-引用&quot;&gt;0x03 引用&lt;/h4&gt;

&lt;p&gt;https://developer.android.com/topic/libraries/architecture/workmanager/basics&lt;/p&gt;</content><author><name>hylinux</name></author><summary type="html">0x00 简述</summary></entry><entry><title type="html">Android 后台任务处理指南</title><link href="http://localhost:4000/Android%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97" rel="alternate" type="text/html" title="Android 后台任务处理指南" /><published>2018-09-28T00:00:00+08:00</published><updated>2018-09-28T00:00:00+08:00</updated><id>http://localhost:4000/Android%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97</id><content type="html" xml:base="http://localhost:4000/Android%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97">&lt;h4 id=&quot;0x00-后台任务处理指南&quot;&gt;0x00 后台任务处理指南&lt;/h4&gt;

&lt;p&gt;Android的主线程（MainThread）主要是处理UI和绘制，接收用户的交互以及处理生命周期等事件。在UI线程中处理耗时操作，将严重影响用户的体验。因此很多任务是需要放在后台任务中进行处理的。&lt;/p&gt;

&lt;p&gt;当需要后台任务时需要考虑以下因素：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;任务是否可以延期执行，还是需要马上执行？&lt;/strong&gt; 例如，当你点击页面上按钮去请求网络数据时，这个任务是需要立即执行，不应该让用户等待。如果是上传用户日志到服务器中，这个任务在不影响用户体验的情况下是可以推迟执行的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;任务一旦开启，操作系统是否要保持该任务所在的进程？&lt;/strong&gt; 例如，解码一个&lt;code class=&quot;highlighter-rouge&quot;&gt;bitmap&lt;/code&gt;并显示到屏幕上，这个任务是需要&lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;在前台并且该进程是活跃的。而一个音乐播放器在&lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;退到后台甚至用户没有进行操作时，也是需要保持播放服务能够正常的进行。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;任务是否需要响应系统的触发事件？&lt;/strong&gt;这些触发事件是指像网络、电量、空间存储等状态的变化。当这些状态变化的时候，可以触发任务的执行。例如当从飞行模式切换回来时，&lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;能够自动与服务端通讯，而且如果此时进程已经被系统杀掉，那么该任务所在的进程应该在有网络的情况下重新创建，然后执行后台任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前Android系统中处理后台任务的方式有以下几种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ThreadPools（线程池）&lt;/li&gt;
  &lt;li&gt;Foreground Services（前台服务）&lt;/li&gt;
  &lt;li&gt;WorkManager（任务管理器）&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;threadpools&quot;&gt;ThreadPools&lt;/h5&gt;

&lt;p&gt;当一个任务必须在&lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;处于前台状态时处理，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ThreadPools&lt;/code&gt;。如果要响应操作系统的触发事件状态，那么只能通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Broadcast Receiver&lt;/code&gt;了。&lt;/p&gt;

&lt;h5 id=&quot;foregound-services&quot;&gt;Foregound Services&lt;/h5&gt;

&lt;p&gt;对于必须执行完成的，并需要马上执行的任务，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Foreground Services&lt;/code&gt;。前台服务会在通知栏中保持一个无法手动取消的通知，它会告诉操作系统这个任务非常重要，不要杀掉。&lt;/p&gt;

&lt;h5 id=&quot;workmanager&quot;&gt;WorkManager&lt;/h5&gt;

&lt;p&gt;对于必须执行完成的，并能否延迟执行的任务，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;。任务管理器是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;库，它优雅地实现了可延迟任务的执行，它还能够响应操作系统的触发事件（网络状态、电量变化等事件）。Android 6.0以上操作系统 &lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt;使用了框架层中的&lt;code class=&quot;highlighter-rouge&quot;&gt;JobScheduler&lt;/code&gt;，用于优化电量消耗和批量任务的执行。在低于&lt;code class=&quot;highlighter-rouge&quot;&gt;Android 6.0 (API 23) &lt;/code&gt;的系统，如果项目有引用&lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase&lt;/code&gt;相关依赖库的话， &lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt; 则会使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase JobDispatcher&lt;/code&gt; ，否则&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt; 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;AlarmManager&lt;/code&gt;来优雅地处理后台任务。&lt;/p&gt;

&lt;p&gt;因此&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt; 其实是封装了&lt;code class=&quot;highlighter-rouge&quot;&gt;JobScheduler&lt;/code&gt; 、&lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase JobDispatcher&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;AlarmManager&lt;/code&gt; 的调用逻辑。它能够以最优的方式选择处理后台任务的方式，这也是&lt;code class=&quot;highlighter-rouge&quot;&gt;google&lt;/code&gt;目前推荐处理后台任务的一种方式。&lt;/p&gt;

&lt;h6 id=&quot;后台任务处理的限制&quot;&gt;后台任务处理的限制&lt;/h6&gt;

&lt;p&gt;为了延长电量使用，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; 处于后台不可见得情况下 Android 限制了后台任务的执行情况。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Android 6.0 (API 23) 引入了 &lt;a href=&quot;https://developer.android.com/training/monitoring-device-state/doze-standby&quot;&gt;Doze mode and app standby&lt;/a&gt;（低耗电模式和待机模式）。在此模式下限制了 &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;访问网络、工作任务和同步的操作。&lt;/li&gt;
  &lt;li&gt;Android 7.0 (API 24) 限制了隐式广播&lt;code class=&quot;highlighter-rouge&quot;&gt;(limited implicit broadcasts)&lt;/code&gt; 并引入了 &lt;a href=&quot;https://developer.android.com/about/versions/nougat/android-7.0#doze_on_the_go&quot;&gt;Doze-on-the-Go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Android 8.0 (API 26) 深度限制了后台任务行为&lt;a href=&quot;https://developer.android.com/about/versions/oreo/background&quot;&gt;limited background behavior&lt;/a&gt;，例如后台获取地理位置。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WorkManager&lt;/code&gt; 是处理以上限制的最好工具。&lt;/p&gt;

&lt;h4 id=&quot;0x01-参考文档&quot;&gt;0x01 参考文档&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/guide/background&quot;&gt;https://developer.android.com/guide/background&lt;/a&gt;&lt;/p&gt;</content><author><name>hylinux</name></author><summary type="html">0x00 后台任务处理指南</summary></entry><entry><title type="html">Android NDK开发CMakeLists文件配置解析</title><link href="http://localhost:4000/Android-NDK%E5%BC%80%E5%8F%91CMakeLists%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90" rel="alternate" type="text/html" title="Android NDK开发CMakeLists文件配置解析" /><published>2018-09-26T00:00:00+08:00</published><updated>2018-09-26T00:00:00+08:00</updated><id>http://localhost:4000/Android%20NDK%E5%BC%80%E5%8F%91CMakeLists%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90</id><content type="html" xml:base="http://localhost:4000/Android-NDK%E5%BC%80%E5%8F%91CMakeLists%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90">&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Android Studio&lt;/code&gt;中建立支持&lt;code class=&quot;highlighter-rouge&quot;&gt;NDK&lt;/code&gt;项目是默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;CMake&lt;/code&gt;的方式来进行构建的，过去的&lt;code class=&quot;highlighter-rouge&quot;&gt;ndk-build&lt;/code&gt;的方式从目前官方的文档上看，应该是逐渐淘汰的。现在大多数&lt;code class=&quot;highlighter-rouge&quot;&gt;APP&lt;/code&gt;架构中都是有&lt;code class=&quot;highlighter-rouge&quot;&gt;Native Code&lt;/code&gt;的，所以了解&lt;code class=&quot;highlighter-rouge&quot;&gt;CMake&lt;/code&gt;的配置方式是进行&lt;code class=&quot;highlighter-rouge&quot;&gt;NDK&lt;/code&gt;开发的基础。&lt;/p&gt;

&lt;h4 id=&quot;0x00-建立支持ndk项目&quot;&gt;0x00 建立支持NDK项目&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Android Studio&lt;/code&gt; 创建&lt;code class=&quot;highlighter-rouge&quot;&gt;NDK&lt;/code&gt;项目是相当简单的，在项目创建向导页面中勾选支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;include C++ support&lt;/code&gt;，然后工程目录中就自动生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;文件。&lt;code class=&quot;highlighter-rouge&quot;&gt;gralde&lt;/code&gt;文件中也会生成相应的&lt;code class=&quot;highlighter-rouge&quot;&gt;ndk&lt;/code&gt;配置。&lt;/p&gt;

&lt;h4 id=&quot;0x01-gradle-配置解析&quot;&gt;0x01 Gradle 配置解析&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Encapsulates your external native build configurations.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;externalNativeBuild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Encapsulates your CMake build configurations.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cmake&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Provides a relative path to your CMake build script.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CMakeLists.txt&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在模块中的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;文件的&lt;code class=&quot;highlighter-rouge&quot;&gt;android{}&lt;/code&gt;块中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;externalNativeBuild&lt;/code&gt;指定了 &lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists&lt;/code&gt; 文件的相对路径，这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists&lt;/code&gt;文件是在工程目录所以直接写文件名称。&lt;/p&gt;

&lt;p&gt;此外还可以在&lt;code class=&quot;highlighter-rouge&quot;&gt; defaultConfig&lt;/code&gt;块再指定一个&lt;code class=&quot;highlighter-rouge&quot;&gt;externalNativeBuild&lt;/code&gt;块，指定一些通用的配置。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;externalNativeBuild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 这里可以配置一些通用的配置&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cmake&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 传递可选的参数到cmake中&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-DANDROID_ARM_NEON=TRUE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-DANDROID_TOOLCHAIN=clang&quot;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cppFlags&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-frtti -fexceptions&quot;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Gradle 会构建这些ABI配置,但打包时仅把 ndk 块中的 ABI 打包进apk&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;abiFilters&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x86&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x86_64&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;armeabi&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;armeabi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7a&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arm64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v8a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ndk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      		&lt;span class=&quot;c1&quot;&gt;// 打包时仅仅会把此块中的 ABI 打包进apk&lt;/span&gt;
      		&lt;span class=&quot;n&quot;&gt;abiFilters&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;armeabi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7a&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arm64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v8a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;externalNativeBuild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;0x02-cmakelists文件配置说明&quot;&gt;0x02 CMakeLists文件配置说明&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists&lt;/code&gt; 文件需要将&lt;code class=&quot;highlighter-rouge&quot;&gt;cmake_minimum_required&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;add_library&lt;/code&gt; 添加进来。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;指定&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmake&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;最低的版本号&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cmake_minimum_required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;指定库的名称，还要指定编译的库是静态库（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STATIC&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）还是共享库（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHARED&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;然后提供源码文件的相对路径。如果有多个库需要编译，则使用多个&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_library&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;方法进行添加。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Specifies&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
             &lt;span class=&quot;kd&quot;&gt;native&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;

             &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sets&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;SHARED&lt;/span&gt;

             &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;native&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cpp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通常还有源码头文件需要添加，所以还要指定头文件目录&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Specifies&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;include_directories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CMake 使用以下规范来为库文件命名：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;库名称&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;so&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以在上面配置了库的名称为&lt;code class=&quot;highlighter-rouge&quot;&gt;native-lib&lt;/code&gt;，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt; 将生成&lt;code class=&quot;highlighter-rouge&quot;&gt;libnative-lib.so&lt;/code&gt;文件，在加载时使用&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;native&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;添加ndk内置的库&quot;&gt;添加NDK内置的库&lt;/h5&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;find_library&lt;/code&gt;可以引用&lt;code class=&quot;highlighter-rouge&quot;&gt;NDK&lt;/code&gt;内部的库，相当于可以使用其他第三方的API的能力&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;find_library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;指定库的名称&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;

              &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;指定&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NDK&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;库中的名称，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmake&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;可以搜索到&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把引用的库和我们自己要编译的链接起来，我们的库才可以使用&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target_link_libraries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;指定哪个库要使用&lt;/span&gt;
                       &lt;span class=&quot;kd&quot;&gt;native&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;

                       &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;把&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;库和我们的库链接起来&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
                       &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;添加-ndk-中的源文件&quot;&gt;添加 NDK 中的源文件&lt;/h5&gt;

&lt;p&gt;例如添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;NDK中&lt;/code&gt;的 &lt;code class=&quot;highlighter-rouge&quot;&gt;android_native_app_glue.c&lt;/code&gt; 文件，然后关联到我们的 &lt;code class=&quot;highlighter-rouge&quot;&gt;nativ-lib&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glue&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;STATIC&lt;/span&gt;
             &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ANDROID_NDK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native_app_glue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android_native_app_glue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;You&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libraries&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;against&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;target_link_libraries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;native&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glue&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;添加预编译库&quot;&gt;添加预编译库&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_library( imported-lib
             SHARED
             IMPORTED )

set_target_properties( # Specifies the target library.
                       imported-lib

                       # Specifies the parameter you want to define.
                       PROPERTIES IMPORTED_LOCATION

                       # Provides the path to the library you want to import.
                       imported-lib/src/${ANDROID_ABI}/libimported-lib.so )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样地，可能还需要指定头文件&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;include_directories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imported&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;0x03-引用&quot;&gt;0x03 引用&lt;/h4&gt;

&lt;p&gt;https://developer.android.com/studio/projects/add-native-code&lt;/p&gt;</content><author><name>hylinux</name></author><summary type="html">在Android Studio中建立支持NDK项目是默认是CMake的方式来进行构建的，过去的ndk-build的方式从目前官方的文档上看，应该是逐渐淘汰的。现在大多数APP架构中都是有Native Code的，所以了解CMake的配置方式是进行NDK开发的基础。</summary></entry><entry><title type="html">Android后台单进程保活处理实践</title><link href="http://localhost:4000/Android%E5%90%8E%E5%8F%B0%E5%8D%95%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5" rel="alternate" type="text/html" title="Android后台单进程保活处理实践" /><published>2018-09-21T00:00:00+08:00</published><updated>2018-09-21T00:00:00+08:00</updated><id>http://localhost:4000/Android%E5%90%8E%E5%8F%B0%E5%8D%95%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5</id><content type="html" xml:base="http://localhost:4000/Android%E5%90%8E%E5%8F%B0%E5%8D%95%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5">&lt;h4 id=&quot;0x00如何实现一个后台进程&quot;&gt;0x00、如何实现一个后台进程&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;自定义的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt;，实现相应的业务逻辑&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Manifest&lt;/code&gt; 文件中配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; 组件，需配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; 属性，然后指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;intent-filter&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;priority&lt;/code&gt; 属性，如下示例：&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.stfl.SSClientService&quot;&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:ssclient&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1000&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;io.telebox.ssclient.service&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;priority&lt;/code&gt; 属性值越大，优先级越高。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;0x01如何重启进程&quot;&gt;0x01、如何重启进程&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;重写 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnDestroy&lt;/code&gt; 方法。主要逻辑是&lt;strong&gt;监听到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; 被杀掉后&lt;/strong&gt;，发送一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Broadcast&lt;/code&gt; 通知，重新启动 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; 进程。根据不同的业务逻辑，可以选择是否调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;killProcess&lt;/code&gt; 方法，彻底清理所有进程资源。可参考如下：&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SSClient is stop!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 根据业务需要决定是否调用killProcess，这里我是推荐调用此方法，清理资源。&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;killProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myPid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 服务关掉通知&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSClientReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_DISCONNECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComponentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPackageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSClientReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sendBroadcast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;需要注意的是，&lt;strong&gt;需要设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;component&lt;/code&gt; 否则在8.0手机会出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;Background execution not allowed&lt;/code&gt;的错误。&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;0x02实现监听进程通知&quot;&gt;0x02、实现监听进程通知&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;继承 &lt;code class=&quot;highlighter-rouge&quot;&gt;BroadcastReceiver&lt;/code&gt; 并实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;onReceive()&lt;/code&gt;方法。实现参考：&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onReceive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ACTION_START:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SSClient&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;start by receiver.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;SSClientService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startSService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ACTION_DISCONNECTED:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SSClient&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;disconnected,restart by receiver.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;SSClientService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startSService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;onSSClientDisconnected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ACTION_CONNECTED:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;onSSClientConnected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;在接收到&lt;code class=&quot;highlighter-rouge&quot;&gt;ACTION_START&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;ACTION_DISCONNECTED&lt;/code&gt;时，就调用启动&lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt;的方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Manifest&lt;/code&gt; 文件中配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;Broadcast&lt;/code&gt; ，示例参考：&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiver&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.stfl.SSClientReceiver&quot;&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;io.telebox.ssclient.start&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h4 id=&quot;0x03需要注意的问题&quot;&gt;0x03、需要注意的问题&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;配置&lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt;优先级&lt;code class=&quot;highlighter-rouge&quot;&gt;priority&lt;/code&gt;属性，尽量提高&lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt;的优先级&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Android 8.0手机发送通知时会出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;Background execution not allowed&lt;/code&gt;的错误，intent要设置component。&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;receiver-action-string&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComponentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPackageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;receiver-class-name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sendBroadcast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Android 8.0后台服务启动时出现&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.IllegalStateException: Not allowed to start service Intent&lt;/code&gt;错误。&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1.启动Service的方法中修改为&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSClientService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPackageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// kill:java.lang.IllegalStateException: Not allowed to start service Intent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startForegroundService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 2.在Service类中调用startForeground方法&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;startForeground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
       	&lt;span class=&quot;c1&quot;&gt;//这个id不要和应用内的其他同志id一样，不行就写 int.maxValue()&lt;/span&gt;
      	&lt;span class=&quot;c1&quot;&gt;//context.startForeground(SERVICE_ID, builder.getNotification());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Android 8.1出现&lt;code class=&quot;highlighter-rouge&quot;&gt;android.app.RemoteServiceException: Bad notification for startForeground&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;startForeground&lt;/code&gt;方法。&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@TargetApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startForeground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channelId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createNotificationChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   
        &lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channelId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOngoing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSmallIcon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mipmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ic_small_logo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPriority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PRIORITY_MIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CATEGORY_SERVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;startForeground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   
    &lt;span class=&quot;nd&quot;&gt;@TargetApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createNotificationChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channelId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;my_service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channelName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My Background Service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NotificationChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotificationChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channelId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;channelName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotificationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IMPORTANCE_NONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLightColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLockscreenVisibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VISIBILITY_PRIVATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NotificationManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotificationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NOTIFICATION_SERVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createNotificationChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channelId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>hylinux</name></author><category term="后台进程" /><category term="Service" /><summary type="html">0x00、如何实现一个后台进程</summary></entry><entry><title type="html">搭建Telegram代理服务</title><link href="http://localhost:4000/%E6%90%AD%E5%BB%BATelegram%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1" rel="alternate" type="text/html" title="搭建Telegram代理服务" /><published>2018-08-06T00:00:00+08:00</published><updated>2018-08-06T00:00:00+08:00</updated><id>http://localhost:4000/%E6%90%AD%E5%BB%BATelegram%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1</id><content type="html" xml:base="http://localhost:4000/%E6%90%AD%E5%BB%BATelegram%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1">&lt;h4 id=&quot;0x00-代理服务&quot;&gt;0x00 代理服务&lt;/h4&gt;

&lt;p&gt;搭建代理服务两种常见方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;shadowsocks&lt;/li&gt;
  &lt;li&gt;socks5&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1-shadowsocks服务&quot;&gt;1. Shadowsocks服务&lt;/h5&gt;

&lt;p&gt;具体搭建步骤可参考&lt;/p&gt;

&lt;p&gt;https://shadowsocks.org/en/download/servers.html&lt;/p&gt;

&lt;p&gt;其中配置文件如下&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_server_ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8388&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local_address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;barfoo!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过命令启动便可以Shadowsocks服务&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ssserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过修改Shadowsocks的配置文件,将&lt;code class=&quot;highlighter-rouge&quot;&gt;local_address&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt;字段修改为一样，也可以设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt;，这时&lt;code class=&quot;highlighter-rouge&quot;&gt;shadowsocks&lt;/code&gt;服务也可以支持&lt;code class=&quot;highlighter-rouge&quot;&gt;socks5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后再通过以下命令启动socks5代理服务（shadowsocks服务必须也要启动）&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nohup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sslocal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;2-socks5搭建&quot;&gt;2. Socks5搭建&lt;/h5&gt;

&lt;p&gt;具体搭建步骤可参考&lt;/p&gt;

&lt;p&gt;https://github.com/wyx176/Socks5&lt;/p&gt;

&lt;h4 id=&quot;0x01-mtproxy-代理搭建&quot;&gt;0x01 MTProxy 代理搭建&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; 使用的是自家通信协议&lt;code class=&quot;highlighter-rouge&quot;&gt;MTProto&lt;/code&gt;,而其本身也提供了基于&lt;code class=&quot;highlighter-rouge&quot;&gt;MTProto&lt;/code&gt;的代理方式，更加轻便有效，针对&lt;code class=&quot;highlighter-rouge&quot;&gt;Telegram&lt;/code&gt;的代理，推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;MTProxy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;具体搭建步骤可参考&lt;/p&gt;

&lt;p&gt;https://github.com/TelegramMessenger/MTProxy&lt;/p&gt;

&lt;h4 id=&quot;0x02-supervisor&quot;&gt;0x02 supervisor&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find / -name supervisor.sock

unlink /name/supervisor.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;https://blog.csdn.net/LHWorldBlog/article/details/78518696&lt;/p&gt;</content><author><name>hylinux</name></author><summary type="html">0x00 代理服务</summary></entry><entry><title type="html">机器学习之逻辑回归</title><link href="http://localhost:4000/logisitic-regression" rel="alternate" type="text/html" title="机器学习之逻辑回归" /><published>2017-08-20T00:00:00+08:00</published><updated>2017-08-20T00:00:00+08:00</updated><id>http://localhost:4000/logisitic-regression</id><content type="html" xml:base="http://localhost:4000/logisitic-regression">&lt;p&gt;[TOC]&lt;/p&gt;

&lt;p&gt;本文主要内容&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;逻辑回归（Logistic Regression）模型&lt;/li&gt;
  &lt;li&gt;决策边界（Decision Boundary）&lt;/li&gt;
  &lt;li&gt;成本函数（Cost Function）&lt;/li&gt;
  &lt;li&gt;梯度下降法（Gradient Descent）&lt;/li&gt;
  &lt;li&gt;多分类问题&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;逻辑回归（Logistic Regression）是机器学习中的监督学习算法，主要用于分类任务。这些任务预测的标签（label）通常为 {0,1}，或者说是一个概率值。 例如我们预测一封邮件是否为垃圾邮件；预测天气是否为晴天、阴天、雨天和雪天等。&lt;/p&gt;

&lt;h3 id=&quot;逻辑回归logistic-regression模型&quot;&gt;逻辑回归（Logistic Regression）模型&lt;/h3&gt;

&lt;p&gt;从上文《机器学习之线性回归》我们知道线性回归的模型为
&lt;script type=&quot;math/tex&quot;&gt;h_\theta(x)=\theta_0+\theta_1x_1+...+\theta_nx_n=\theta^Tx&lt;/script&gt;
可以从上面模型通过函数 g 对线性回归进行变换
&lt;script type=&quot;math/tex&quot;&gt;h_\theta(x)=g(\theta^Tx) \tag 1&lt;/script&gt;
其中
&lt;script type=&quot;math/tex&quot;&gt;g(z)=\frac 1 {1+e^{-z}} \tag 2&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;其中g(z) 是 &lt;strong&gt;sigmoid 函数或者叫逻辑函数&lt;/strong&gt;。可以看出 0&amp;lt;= g(z)&amp;lt;=1&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://angrycode.qiniudn.com/sigmoid_functio.jpeg&quot; alt=&quot;sigmoid function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由 (1) 和 (2)
&lt;script type=&quot;math/tex&quot;&gt;h_\theta(x)=\frac 1 {1+e^{-\theta^Tx}} \tag 3&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;这就是&lt;strong&gt;逻辑回归的数学模型&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;因为预测值 h(x) 是在{0,1}，故还可以用概率的角度进行解析这个模型的预测结果。&lt;/p&gt;

&lt;p&gt;以预测垃圾邮件为例，如果 y=1 表示这封邮件时垃圾邮件，那么预测模型可以表示&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_\theta(x)=P(y=1|x;\theta) \tag 4&lt;/script&gt;

&lt;h3 id=&quot;决策边界decision-boundary&quot;&gt;决策边界（Decision Boundary）&lt;/h3&gt;

&lt;p&gt;我们知道 sigmoid 函数的值是在 {0,1} 范围，当 \(h_\theta(x)\geq0.5\) 时，预测y=1，反之则预测 y=0。&lt;/p&gt;

&lt;p&gt;根据 sigmoid 函数可以知道要预测 \(h_\theta(x)\geq0.5\) 那么等价于 \(\theta^Tx\geq0\)&lt;/p&gt;

&lt;p&gt;我们以这张来自于 Andrew Ng 机器学习课程的 ppt 来说明。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://angrycode.qiniudn.com/decision_boundary.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假设通过训练得出
&lt;script type=&quot;math/tex&quot;&gt;\theta=\begin{bmatrix}
-3\\
1\\
1
\end{bmatrix}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;那么
&lt;script type=&quot;math/tex&quot;&gt;x_1+x_2=3 \tag 5&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;就是&lt;strong&gt;决策边界&lt;/strong&gt;。当&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x_1+x_2\geq3&lt;/script&gt;

&lt;p&gt;表示预测值 y=1，反之预测值 y=0。&lt;/p&gt;

&lt;p&gt;除了线性决策边界，还可以是曲线的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://angrycode.qiniudn.com/non-linear-decision-boundary.png&quot; alt=&quot;non-linear-decision-boundary&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里的决策边界就是&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x_1+x_2=1 \tag 6&lt;/script&gt;

&lt;p&gt;以上两个例子都是简单的边界，当然实际情况下，决策边界有能是复杂的图形，甚至是高维度的。&lt;/p&gt;

&lt;h3 id=&quot;成本函数cost-function&quot;&gt;成本函数（Cost Function）&lt;/h3&gt;

&lt;p&gt;回忆一下线性回归中的成本函数&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;J(\theta)=\frac 1 {2m} \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2&lt;/script&gt;
我们定义函数&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Cost(h_\theta(x),y)=\frac 1 2 (h_\theta(x)-y)^2&lt;/script&gt;

&lt;p&gt;那么成本函数就可以写成&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta)=\frac 1 m \sum_{i=1}^mCost(h_\theta(x),y)&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;逻辑回归的成本函数（Cost Function）&lt;/strong&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
Cost(h_\theta(x),y)=
\begin{cases}
-log(h_\theta(x)) &amp; \text{if $y$ =1} \\
-log(1-h_\theta(x)) &amp; \text{if $y$ =0}
\end{cases} \tag 7 %]]&gt;&lt;/script&gt;

&lt;p&gt;当 y=1 时&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://angrycode.qiniudn.com/minus-logx.png?imageView2/2/w/200/h/200&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当 y=0 时&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://angrycode.qiniudn.com/minus-log1-x.png?imageView2/2/w/200/h/200&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于 y 取值是{0,1}，我们可以把公式 (7) 写成&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Cost(h_\theta(x),y)=-ylog(h_\theta(x))-(1-y)log(1-h_\theta(x)) \\ y\in {\{0,1\}}\tag 8&lt;/script&gt;

&lt;h3 id=&quot;梯度下降法gradient-descent&quot;&gt;梯度下降法（Gradient Descent）&lt;/h3&gt;

&lt;p&gt;由上文可以知道成本函数为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta)=-\frac 1 m \sum_{i=1}^{m}(y^{(i)}log(h_\theta(x^{(i)}))+(1-y^{(i)})log(1-h_\theta(x^{(i)})))&lt;/script&gt;

&lt;p&gt;要求\(min_{\theta}J(\theta)\)，需要使用微分求导公式&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x)'=(log_ax)'=\frac 1 x lna&lt;/script&gt;

&lt;p&gt;同时为了简单起见，求导时可以假设只有一个样本，这样可以把∑符号去掉，方便推导。&lt;/p&gt;

&lt;p&gt;因为上文中 log 函数默认是以 e 底的&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;log(h_\theta(x))' =\frac 1 {h_\theta(x)} \frac d {d\theta}h_\theta(x)&lt;/script&gt;

&lt;p&gt;因为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g(z)=\frac 1 {1+e^{-z}}&lt;/script&gt;

&lt;p&gt;有
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}g(z)'&amp;=\frac d {dz}(1+e^{-z})^{-1} \\
&amp;=-(1+e^{-z})^{-2} \cdot (e^{-z})\cdot(-1)\\
&amp;=\frac {e^{-z}} {(1+e^{-z})^2}\\
&amp;=g(z) \cdot (\frac {e^{-z}} {1+e^{-z}})\\
&amp;=g(z)(1-g(z))
\end{split}\end{equation} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;那么有&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac d {d\theta_j}g(\theta^Tx)=g(\theta^Tx)(1-g(\theta^Tx))\theta_j&lt;/script&gt;

&lt;p&gt;于是
&lt;script type=&quot;math/tex&quot;&gt;J(\theta_j)'=\frac 1 m \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x^{(i)}_j \\
j \in {\{0,1,2...n\}}
\tag 9&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;这个式子形式上与线性回归的\(J(\theta)\)的偏导数是很相似的，但是需要注意的是
\
预测函数 h(x) 是不一样的。&lt;/p&gt;

&lt;p&gt;根据梯度下降法&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}repeat &amp;\{\\
&amp;\theta_j := \theta_j-\alpha\frac 1 m \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x^{(i)}_j \\
\}
\end{split}\end{equation} %]]&gt;&lt;/script&gt;

&lt;h3 id=&quot;多分类问题&quot;&gt;多分类问题&lt;/h3&gt;

&lt;p&gt;对于二分类问题，我们很容易就可以建立模型。如果预测一个多分类问题，我们应该如何做呢？我们还是以Andrew Ng的ppt来说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://angrycode.qiniudn.com/multi-class.png&quot; alt=&quot;multi-class&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如要预测一个三分类的问题，假设要预测class1，那么就可以其他两类class2，class3当做一个分类，这样转换成一个二分类问题。这时候我们就需要根据已有的训练数据构造新的训练数据。预测class2，class3时，以此类推。这样就需要有三个不同训练数据。&lt;/p&gt;

&lt;p&gt;当有一个新的数据进行预测时，我们只要计算下面式子的最大值就可以了&lt;/p&gt;

&lt;p&gt;ß
&lt;script type=&quot;math/tex&quot;&gt;\max_i h_\theta(x^{(i)})\\ i\in\{1,2,3\}&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;参考文献&quot;&gt;参考文献&lt;/h3&gt;

&lt;p&gt;Andrew Ng coursera 机器学习课程&lt;/p&gt;</content><author><name>hylinux</name></author><summary type="html">[TOC]</summary></entry><entry><title type="html">机器学习之朴素贝叶斯</title><link href="http://localhost:4000/naive-bayesian" rel="alternate" type="text/html" title="机器学习之朴素贝叶斯" /><published>2017-08-08T00:00:00+08:00</published><updated>2017-08-08T00:00:00+08:00</updated><id>http://localhost:4000/naive-bayesian</id><content type="html" xml:base="http://localhost:4000/naive-bayesian">&lt;p&gt;本文会讲到以下内容&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;贝叶斯定理&lt;/li&gt;
  &lt;li&gt;垃圾邮件分类器&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;贝叶斯定理&quot;&gt;贝叶斯定理&lt;/h3&gt;

&lt;p&gt;贝叶斯定理又称贝叶斯法则，它的形式为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(A|B)=\frac {P(B|A)P(A)} {P(B)} \tag 1&lt;/script&gt;

&lt;p&gt;其中 P(A)、 P(B) 分别为事件 A、B出现的的概率，且 \( P(B) \neq 0 \)&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;P(A&lt;/td&gt;
      &lt;td&gt;B) 为条件概率，表示在 B 事件出现的情况下 A 的概率。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;P(B) 表示全概率，它可以表示为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(B)=\sum_i^mP(B|A_i)P(A_i) \tag 2&lt;/script&gt;

&lt;p&gt;上面式子的意思是 B 事件出现的概率是由因素 m 个\( A_i \) 影响的。&lt;/p&gt;

&lt;p&gt;故（1）中的条件概率又可以&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(A|B)=\frac {P(B|A)P(A)} {\sum_i^mP(B|A_i)P(A_i)} \tag 3&lt;/script&gt;

&lt;p&gt;可以简单地&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(A|B)=\frac {P(B|A)P(A)} {P(B|A)P(A)+P(B|\rightharpoondown A)P(\rightharpoondown A)} \tag 4&lt;/script&gt;

&lt;p&gt;其中 \( P(A)=1-P(-A) \)&lt;/p&gt;

&lt;h3 id=&quot;垃圾邮件分类器&quot;&gt;垃圾邮件分类器&lt;/h3&gt;

&lt;p&gt;在机器学习中贝叶斯分类器经常见的应用是&lt;strong&gt;垃圾邮件分类&lt;/strong&gt;。下面我们就运用贝叶斯定理推导一下垃圾邮件的分类模型算法。&lt;/p&gt;

&lt;p&gt;假设&lt;/p&gt;

&lt;p&gt;\( W_1,W_2,W_3,…,W_i \) 垃圾邮件中出现单词 i 的事件；&lt;/p&gt;

&lt;p&gt;S 为垃圾邮件的事件，H 为正常邮件；&lt;/p&gt;

&lt;p&gt;P(S) 垃圾邮件概率,P(H) 为正常邮件的概率；&lt;/p&gt;

&lt;p&gt;而 P(S)、P(H) 是先验概率，表示在统计之前一封邮件的概率,这里我们假设 P(S) = P(H)=0.5；&lt;/p&gt;

&lt;p&gt;\( P(W_i) \) 为单词 i 出现的概率。&lt;/p&gt;

&lt;p&gt;那么如果有一份邮件出现了单词 \( W_1 \)，那么它是垃圾邮件和正常邮件的概率分别是多大呢？&lt;/p&gt;

&lt;p&gt;根据贝叶斯定理&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(S|W_1)=\frac {P(W_1|S)P(S)} {P(W_1)} \\
P(S|W_2)=\frac {P(W_2|S)P(S)} {P(W_2)} \\
\vdots \\
\\
P(S|W_i)=\frac {P(W_i|S)P(S)} {P(W_i)} \\ \tag 5&lt;/script&gt;

&lt;p&gt;这样可以计算出每个单词的垃圾邮件的条件概率。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;其中 \( P(W_i&lt;/td&gt;
      &lt;td&gt;S) \) 表示垃圾邮件中 \( W_i \) 出现的概率，可以根据训练数据可以统计出来。\( P(W_i) \) 也可以从训练数据中得到。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;但是仅仅根据其中一个单词来判断一封邮件是否是垃圾邮件，显然是不行的。这就需要计算&lt;strong&gt;联合概率（Combining Probabilities）&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;联合概率combining-probabilities&quot;&gt;联合概率（Combining Probabilities）&lt;/h4&gt;

&lt;p&gt;我们从（5）的式子中选取 n 个概率最大的单词来计算它们的联合概率。&lt;/p&gt;

&lt;p&gt;为了简单我们这里取 n=2，于是计算两个单词的联合概率&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(S|W_1,W_2)=\frac {P(W_1,W_2|S)P(S)} {P(W_1,W_2)} \tag 6&lt;/script&gt;

&lt;p&gt;又由于我们假设单词 \( W_1,W_2 \) 是相互独立的（实际上不是，但是这个假设很有用，而且这样假设实际效果很不错，所以才称之为&lt;strong&gt;朴素贝叶斯&lt;/strong&gt;）&lt;/p&gt;

&lt;p&gt;所以&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(W_1,W_2|S)=P(W_1|S)P(W_2|S) \tag 7&lt;/script&gt;

&lt;p&gt;又根据全概率公式有&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}P(W_1,W_2)&amp;=P(W_1,W_2|S)P(S) +P(W_1,W_2|S)P(H)\\
&amp;=P(W_1|S)P(W_2|S) P(S)+P(W_1|H)P(W_2|H)P(H) \end{split}\end{equation}\tag 8 %]]&gt;&lt;/script&gt;

&lt;p&gt;由（6）（7）（8）&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(S|W_1,W_2)=\frac {P(W_1|S)P(W_2|S) P(S)} {P(W_1|S)P(W_2|S) P(S)+P(W_1|H)P(W_2|H)P(H)} \tag 9&lt;/script&gt;

&lt;p&gt;将 P(S)=P(H)=0.5 代入&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(S|W_1,W_2)=\frac {P(W_1|S)P(W_2|S)} {P(W_1|S)P(W_2|S) +P(W_1|H)P(W_2|H)} \tag {10}&lt;/script&gt;

&lt;p&gt;且有&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(W_1|H)=P(W_1|-S)=1-P(W_1|S)\\
P(W_2|H)=P(W_2|-S)=1-P(W_2|S) \tag {11}&lt;/script&gt;

&lt;p&gt;最终&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(S|W_1,W_2)=\frac {P(W_1|S)P(W_2|S)} {P(W_1|S)P(W_2|S) +(1-P(W_1|S))(1-P(W_2|S))} \tag {12}&lt;/script&gt;

&lt;p&gt;这个就是 \( W_1,W_2 \) 的&lt;strong&gt;联合概率&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;一般地&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(S|W_1,W_2,...,W_i)=\frac {P_1P_2...P_i} {P_1P_2...P_3 +(1-P_1)(1-P_2)...(1-P_i)} \tag {13}&lt;/script&gt;

&lt;p&gt;上式就是&lt;strong&gt;垃圾邮件的分类模型&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;参考文档&quot;&gt;参考文档&lt;/h4&gt;

&lt;p&gt;http://cs229.stanford.edu/materials.html&lt;/p&gt;

&lt;p&gt;http://www.mathpages.com/home/kmath267/kmath267.htm&lt;/p&gt;

&lt;p&gt;https://en.wikipedia.org/wiki/Bayes%27_theorem&lt;/p&gt;

&lt;p&gt;http://www.paulgraham.com/spam.html&lt;/p&gt;</content><author><name>hylinux</name></author><summary type="html">本文会讲到以下内容</summary></entry><entry><title type="html">机器学习之线性回归</title><link href="http://localhost:4000/linear-regression" rel="alternate" type="text/html" title="机器学习之线性回归" /><published>2017-08-07T00:00:00+08:00</published><updated>2017-08-07T00:00:00+08:00</updated><id>http://localhost:4000/linear-regression</id><content type="html" xml:base="http://localhost:4000/linear-regression">&lt;p&gt;线性回归属于&lt;strong&gt;监督学习&lt;/strong&gt;算法中的一种，也是最简单的一种算法。本文将讲述以下内容&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Linear Regression 线性回归&lt;/li&gt;
  &lt;li&gt;Cost Function 成本函数&lt;/li&gt;
  &lt;li&gt;Gradient Decent 梯度下降法&lt;/li&gt;
  &lt;li&gt;Normal Equations 正规方程&lt;/li&gt;
  &lt;li&gt;Probabilistic interpretation 概率论解释&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;linear-regression-线性回归&quot;&gt;Linear Regression 线性回归&lt;/h2&gt;

&lt;p&gt;简单地
&lt;script type=&quot;math/tex&quot;&gt;h_\theta(x)=\theta_0+\theta_1x&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;若有5个样本，令 \(x_0=1\) ，那么
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}h_\theta(x^{(1)})\\
h_\theta(x^{(2)})\\
h_\theta(x^{(3)})\\
h_\theta(x^{(4)})\\
h_\theta(x^{(5)})\\
\end{bmatrix}=\begin{bmatrix}
1&amp;x^{(1)}\\
1&amp;x^{(2)}\\
1&amp;x^{(3)}\\
1&amp;x^{(4)}\\
1&amp;x^{(5)}\\
\end{bmatrix}
\begin{bmatrix}
\theta_0\\
\theta_1
\end{bmatrix} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;若有2个变量&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_\theta(x)=\theta_0+\theta_1x_1+\theta_2x_2&lt;/script&gt;

&lt;p&gt;那么&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}
h_\theta(x^{(1)})\\
h_\theta(x^{(2)})\\
h_\theta(x^{(3)})\\
h_\theta(x^{(4)})\\
h_\theta(x^{(5)})\\
\end{bmatrix}=\begin{bmatrix}
1&amp;x_1^{(1)}&amp;x_2^{(1)}\\
1&amp;x_1^{(2)}&amp;x_2^{(2)}\\
1&amp;x_1^{(3)}&amp;x_2^{(3)}\\
1&amp;x_1^{(4)}&amp;x_2^{(4)}\\
1&amp;x_1^{(5)}&amp;x_2^{(5)}\\
\end{bmatrix}
\begin{bmatrix}
\theta_0\\
\theta_1
\end{bmatrix} %]]&gt;&lt;/script&gt;

&lt;p&gt;一般地&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_\theta(x) = \theta_0 + \theta_1x_1+...+\theta_nx_n&lt;/script&gt;

&lt;p&gt;写成向量的形式&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_\theta(x)=\sum_i^m\theta_ix_i=\theta^Tx&lt;/script&gt;

&lt;p&gt;其中 \(\theta\) 是权重，\( x_i \) 是feature，\( h_\theta(x) \)是 hypothesis。
对于有 m 个样本，更一般地为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_\theta(x^{(i)})=\theta^Tx^{(i)}&lt;/script&gt;

&lt;h3 id=&quot;cost-function-成本函数&quot;&gt;Cost Function 成本函数&lt;/h3&gt;

&lt;p&gt;成本函数定义为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = \frac 1 {2m} \sum_{i=1}^m (h_\theta(x^{(i)})-y^{(i)})^2&lt;/script&gt;

&lt;p&gt;其中 y 是真实值，而 \(h(x)\) 为机器预测值，i 表示第几个样本，前面的 1/2 是为了后面的计算方便引用的，当 y 和 h 的差的平方和为最小时，这样的直线就是我们要找的最佳拟合直线。&lt;/p&gt;

&lt;p&gt;那如何找到这样\(\theta\) 呢？这就用到了&lt;strong&gt;Gradient Descent&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;gradient-descent-梯度下降法&quot;&gt;Gradient Descent 梯度下降法&lt;/h3&gt;

&lt;p&gt;假设只有单变量的线性函数，那么 \(J(\theta)\) 可以看出是一个碗状的面，如&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://angrycode.qiniudn.com/1346902099_4852.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们使用一些迭代公式进行搜索，找到最小值&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_j:=\theta_j-\alpha\frac{\partial}{\partial \theta_j} J(\theta)&lt;/script&gt;

&lt;p&gt;其中 &lt;strong&gt;:=&lt;/strong&gt;表示赋值符号，=表示比较两个值是否相等，\(\alpha\) 是学习率。我们需要对 \(\theta_j\) 求偏导&lt;/p&gt;

&lt;p&gt;为了简单起见，我们考虑只有一个样本的情况，这样可以把&lt;strong&gt;累加符号&lt;/strong&gt;去掉&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}\frac{\partial J(\theta)} {\partial \theta_j}&amp;=\frac{\partial } {\partial \theta_j}\frac 1 2 (h_\theta(x)-y)^2\\
&amp;=2 \cdot\frac 1 2 (h_\theta(x)-y)\frac {\partial} {\partial \theta_j}(h_\theta(x)-y)\\
&amp;= (h_\theta(x)-y)\frac {\partial} {\partial \theta_j}(\sum_i^n\theta_ix_i-y)\\
&amp;= (h_\theta(x)-y)x_j\end{split}\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;于是，当只有一个样本的情况时&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_j:=\theta_j+\alpha(y^{(i)}-h_\theta(x^{(i)}))x_j&lt;/script&gt;

&lt;p&gt;推广到 n 个样本&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_j:=\theta_j+\alpha\sum_i^n(y^{(i)}-h_\theta(x^{(i)}))x_j&lt;/script&gt;

&lt;h3 id=&quot;normal-equations&quot;&gt;Normal Equations&lt;/h3&gt;

&lt;p&gt;假设X 是一个 m x n 的矩阵，那么可以&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;X=\begin{bmatrix}-{(x^{(1)})}^T-\\-{(x^{(2)})}^T-\\\vdots\\-{(x^{(m)})}^T-\end{bmatrix}&lt;/script&gt;

&lt;p&gt;\(\vec y\) 是一个 m 维向量&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vec y = \begin{bmatrix}y^{(1)}\\y^{(2)}\\\vdots\\y^{(m)}\end{bmatrix}&lt;/script&gt;

&lt;p&gt;由于&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_\theta(x^{(i)})=(x^{(i)})^T\theta&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}X\theta-\vec y
&amp;=\begin{bmatrix}(x^{(1)^T})\\(x^{(2)^T})\\
\vdots\\
(x^{(m)^T})\end{bmatrix}
\begin{bmatrix}y^{(1)}\\
y^{(2)}\\
\vdots\\
y^{(m)}\end{bmatrix}\\
&amp;=\begin{bmatrix}(x^{(1)})^T-y^{(1)}\\
(x^{(2)})^T-y^{(2)}\\\vdots\\(x^{(m)})^T-y^{(m)}\end{bmatrix}\end{split}\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;又如果 z 是一个向量，那么有&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;z^Tz=\sum_iz_i^2&lt;/script&gt;

&lt;p&gt;所以&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}\frac 1 {2m}(X\theta-\vec y)^T(X\theta-\vec y^)
&amp;=\frac 1 {2m} \sum_i^m(h_\theta(x^{i})-y^{(i)})^2\\
&amp;=J(\theta)\end{split}\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;那么要求 \(J(\theta)\) 的最小值，那么需要对其求导，求得极值点。&lt;/p&gt;

&lt;p&gt;这时候会用到对矩阵的求导公式&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}\nabla_\theta J(\theta)&amp;=\nabla_\theta\frac 1 2(X\theta-\vec y)^T(X\theta-\vec y^)\\
&amp;=\frac 1 2 \nabla_\theta(\theta^T X^T X\theta-\theta^TX^T\vec y-{\vec y}^TX\theta+{\vec y}^T\vec y)\\
&amp;=\frac 1 2 \nabla_\theta tr(\theta^T X^T X\theta-\theta^TX^T\vec y-{\vec y}^TX\theta+{\vec y}^T\vec y)\\
&amp;=\frac 1 2\nabla_\theta (tr\theta^TX^TX\theta-tr\theta^TX^T\vec y-tr\vec y^TX\theta)\\
&amp;=\frac 1 2\nabla_\theta (tr\theta^TX^TX\theta-tr(\vec y^T(X\theta))^T-tr\vec y^TX\theta)\\
&amp;=\frac 1 2\nabla_\theta (tr\theta^TX^TX\theta-2tr\vec y^TX\theta)\\
&amp;=\frac 1 2(X^TX\theta+X^TX\theta-2X^T\vec y)\\
&amp;=X^TX\theta-X^T\vec y\end{split}\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;第3步用到&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;trR=R,\text {$R$是实数}&lt;/script&gt;

&lt;p&gt;第5步用到&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;trA=trA^T&lt;/script&gt;

&lt;p&gt;最后用到以下公式&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\nabla_AtrAB=\nabla_AtrBA=B^T\tag 1&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\nabla_{A^T}f(A)=(\nabla_Af(A))^T\tag 2&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\nabla_AtrABA^TC=CAB+C^TAB^T\tag 3&lt;/script&gt;

&lt;p&gt;由公式(2)(3)&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\nabla_{A^T}trABA^TC=B^TA^TC^T+BA^TC\tag 4&lt;/script&gt;

&lt;p&gt;若 C=I，即 C 为单位矩阵，那么&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\nabla_{A^T}ABA^T=B^TA^T+BA^T\tag 5&lt;/script&gt;

&lt;p&gt;故要求得 \(J(\theta)\) 最小值，就令导数等于0&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;X^TX\theta=X^T\vec y&lt;/script&gt;

&lt;p&gt;于是就得到所谓的 &lt;strong&gt;normal equations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta=(X^TX)^{-1}X^T\vec y&lt;/script&gt;&lt;/p&gt;
&lt;h3 id=&quot;probabilistic-interpretation-概率论解释&quot;&gt;Probabilistic interpretation 概率论解释&lt;/h3&gt;

&lt;p&gt;从上文可以知道成本函数为&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = \frac 1 {2m} \sum_{i=1}^m (h_\theta(x^{(i)})-y^{(i)})^2&lt;/script&gt;

&lt;p&gt;那么为什么会这样定义呢？下文我们来从概率论的角度来说明。&lt;/p&gt;

&lt;p&gt;假设目标变量 y 与输入变量存在以下关系&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;y^{(i)}=\theta^Tx^{(i)}+\epsilon^{(i)}&lt;/script&gt;

&lt;p&gt;\(\epsilon^{(i)}\) 表示误差项，例如样本的测量误差等因素。我们再假设这个误差是&lt;strong&gt;独立同分布&lt;/strong&gt;的，即它是符合&lt;strong&gt;高斯分布或正态分布&lt;/strong&gt;，那么&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(\epsilon^{(i)})=\frac 1 {\sqrt {2\pi\sigma^2}}exp\left(-\frac {( \epsilon^{(i)})^2}{2\sigma^2}\right)&lt;/script&gt;

&lt;p&gt;于是&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(y^{(i)}|x^{(i)};\theta)=\frac 1 {\sqrt {2\pi\sigma^2}}exp\left(-\frac {(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}\right)&lt;/script&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\(p(y^{(i)}&lt;/td&gt;
      &lt;td&gt;x^{(i)};\theta)\) 表示给定以\(\theta\)为参数的\(x^{(i)} y^{(i)}\)的分布。同时需要注意的时，中间的是分号不能写成逗号，因为\(\theta\)不是随机变量。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;通常我们把\(p(y^{(i)}&lt;/td&gt;
      &lt;td&gt;x^{(i)};\theta)\) 称之为 &lt;strong&gt;Likelihood Function（似然函数）&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L(\theta)=L(\theta;X,\vec y)=p(\vec y|X;\theta)&lt;/script&gt;

&lt;p&gt;还可以写成&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}L(\theta)&amp;=\prod_{i=1}^mp(y^{(i)}|x^{(i)};\theta)\\
&amp;=\prod_{i=1}^m\frac 1 {\sqrt {2\pi\sigma^2}}exp\left(-\frac {(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}\right)\end{split}\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;要求 \(\theta\) 使得样本中的值出现的概率是最大的，于是要求似然函数的最大值。&lt;/p&gt;

&lt;p&gt;把上面的式子的连乘运算转化成加和运算，可以化简计算&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}\begin{split}l(\theta)&amp;=logL(\theta)\\
&amp;=log\prod_{i=1}^m\frac 1 {\sqrt {2\pi\sigma^2}}exp\left(-\frac {(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}\right)\\
&amp;=\sum_{i=1}^mlog\frac 1 {\sqrt {2\pi\sigma^2}}exp\left(-\frac {(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}\right)\\
&amp;=\sum_{i=1}^mlog\frac 1 {\sqrt{2\pi\sigma^2}}+\sum_{i=1}^m\left(-\frac {(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}\right)\\
&amp;=m\cdot log \frac 1 {\sqrt{2\pi\sigma^2}}-\frac 1 {\sigma^2}\cdot \frac 1 2\sum_{i=1}^m(y^{(i)}-\theta^Tx^{(i)})^2\end{split}\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;于是，要求 \( L(\theta) \) 的最大值，就是要求以下式子的最小值&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac 1 2 \sum_{i=1}^m (h_\theta(x^{(i)})-y^{(i)})^2&lt;/script&gt;

&lt;p&gt;而这个就是我们的 &lt;strong&gt;Cost Function（成本函数）&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;参考文档&quot;&gt;参考文档&lt;/h3&gt;

&lt;p&gt;http://cs229.stanford.edu/materials.html&lt;/p&gt;</content><author><name>hylinux</name></author><summary type="html">线性回归属于监督学习算法中的一种，也是最简单的一种算法。本文将讲述以下内容</summary></entry><entry><title type="html">老司机带路——15个Android撸代码常见的坑</title><link href="http://localhost:4000/%E8%80%81%E5%8F%B8%E6%9C%BA%E5%B8%A6%E8%B7%AF-15%E4%B8%AAAndroid%E6%92%B8%E4%BB%A3%E7%A0%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9D%91" rel="alternate" type="text/html" title="老司机带路——15个Android撸代码常见的坑" /><published>2017-03-22T00:00:00+08:00</published><updated>2017-03-22T00:00:00+08:00</updated><id>http://localhost:4000/%E8%80%81%E5%8F%B8%E6%9C%BA%E5%B8%A6%E8%B7%AF%E2%80%94%E2%80%9415%E4%B8%AAAndroid%E6%92%B8%E4%BB%A3%E7%A0%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9D%91</id><content type="html" xml:base="http://localhost:4000/%E8%80%81%E5%8F%B8%E6%9C%BA%E5%B8%A6%E8%B7%AF-15%E4%B8%AAAndroid%E6%92%B8%E4%BB%A3%E7%A0%81%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9D%91">&lt;p&gt;老司机为何能够成为老司机，不是因为开车开得多，而是撸多了…&lt;/p&gt;

&lt;h3 id=&quot;0x00-使用-startactivityforresult-后在-onactivityresult-中没有正确回调到-activityresult_ok&quot;&gt;0x00 使用 startActivityForResult 后在 onActivityResult 中没有正确回调到 Activity.RESULT_OK&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;要正确获取到 &lt;code class=&quot;highlighter-rouge&quot;&gt;RESULT_OK&lt;/code&gt; 的状态码，&lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt; 的启动模式不能为设置为的 &lt;code class=&quot;highlighter-rouge&quot;&gt;singleTask&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;singleInstance&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;startActivityForResult(intent,requestCode)&lt;/code&gt; 方法时第二个参数不应该使用过大的整数，例如超过 &lt;strong&gt;65535&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;0x01-activity-的-oncreate-方法中操作-view-相关&quot;&gt;0x01 Activity 的 onCreate() 方法中操作 View 相关&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;不能直接获取 &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的宽高，而应在 &lt;code class=&quot;highlighter-rouge&quot;&gt;view.post()&lt;/code&gt; 里面操作&lt;/li&gt;
  &lt;li&gt;不能调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;PopupWindow&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; 方法显示，也应在 &lt;code class=&quot;highlighter-rouge&quot;&gt;view.post()&lt;/code&gt; 里面操作&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;0x02-transactiontoolargeexception-异常&quot;&gt;0x02 TransactionTooLargeException 异常&lt;/h3&gt;

&lt;p&gt;这个错误主要发生在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Intent &lt;/code&gt; 中传递了大量的数据。&lt;/p&gt;

&lt;p&gt;例如有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity &lt;/code&gt; 页面跳转中，经常会使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Intent&lt;/code&gt; 传递数据，但是稍不留神就会把一个很大的对象(列表，&lt;code class=&quot;highlighter-rouge&quot;&gt;bitmap&lt;/code&gt; 等)传递过去，这时候就会出现这个异常。&lt;/p&gt;

&lt;p&gt;建议不要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Intent&lt;/code&gt; 中传递大数据，应该使用持久化的方式共享数据。而且数据过多也会影响&lt;code class=&quot;highlighter-rouge&quot;&gt;Activity &lt;/code&gt; 的启动速度。&lt;/p&gt;

&lt;p&gt;类似问题 &lt;code class=&quot;highlighter-rouge&quot;&gt;startActivity()&lt;/code&gt; 时发生以下错误&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;java.lang.SecurityException: Unable to find app for caller android.app.ApplicationThreadProxy。This log means that your app is having trouble handling a communication intent. Sometimes problems like this can be cause by sending an intent with big extras. Try to reduce the dimension of the image or, and this is the best way, save your image on the sd and put in the extras only the Uri of that image。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;即不要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Intent&lt;/code&gt; 中传递大量的数据数据，否则会抛异常。&lt;/p&gt;

&lt;h3 id=&quot;0x03-fragmenttransactionsetcustomanimations-后动画没有效果&quot;&gt;0x03 FragmentTransaction.setCustomAnimations() 后动画没有效果&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setCustomAnimations  &lt;/code&gt; 要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;replace()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;remove()&lt;/code&gt; 等对 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fragment&lt;/code&gt; 添加或者移除的方法前面。&lt;/p&gt;

&lt;h3 id=&quot;0x04-应用使用多进程应该注意的问题&quot;&gt;0x04 应用使用多进程应该注意的问题&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; 会被初始化多次，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt; 方法会执行多次。在这里的一些初始化逻辑，例如数据库初始化，就需要根据判断当前进程的名称来进行初始化。&lt;/li&gt;
  &lt;li&gt;主进程与子进程数据共享的问题。由于不存在同一个内存空间，数据共享可以考虑使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ContentProvider&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;0x05-应用打包后-h5-无法访问到-webview-与-js-交互的自定义-jsbridge-类&quot;&gt;0x05 应用打包后 H5 无法访问到 WebView 与 JS 交互的自定义 JSBridge 类&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebView&lt;/code&gt; 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;addJavascriptInterface()&lt;/code&gt; 注入本地实现的方法类 &lt;code class=&quot;highlighter-rouge&quot;&gt;JsBridge&lt;/code&gt; 供 H5 访问，但是打包时应该把自定义的 &lt;code class=&quot;highlighter-rouge&quot;&gt;JSBridge&lt;/code&gt; 类加入到混淆规则里面，否则混淆后 H5 将有可能无法访问本地方法。&lt;/p&gt;

&lt;h3 id=&quot;0x06-app-端使用-webviewloadurl-执行-js-方法后无响应&quot;&gt;0x06 App 端使用 WebView.loadUrl() 执行 JS 方法后无响应&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebView&lt;/code&gt; 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;loadUrl()&lt;/code&gt; 执行 JS 方法后却无响应，但是前端确定已提供。这时候应该考虑使用主线程（例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;WebView.post()&lt;/code&gt; ）来执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;loadUrl()&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;通过 H5 调用本地方法时，如果 H5 是异步调用，那么也应该考虑把本地方法的实现放在主线程中。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;0x07-ui-控件的样式出现了很奇诡的渲染例如花屏闪动等的问题&quot;&gt;0x07 UI 控件的样式出现了很奇诡的渲染，例如花屏、闪动等的问题&lt;/h3&gt;

&lt;p&gt;有些机型使用硬件加速出现了一些奇诡的UI问题，可以检查一下控件所在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt; 是否配置了硬件加速，多数情况下去掉硬件加速就 OK 了。&lt;/p&gt;

&lt;p&gt;如果需要硬件加速的配置，可以考虑在控件本身上使用，而不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt; 上。&lt;/p&gt;

&lt;h3 id=&quot;0x08-activity-与-fragment-控件-id-重复的问题&quot;&gt;0x08 Activity 与 Fragment 控件 ID 重复的问题&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt; 中使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fragment&lt;/code&gt; ，&lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt; 中有一个控件 ID 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;R.id.widget_btn&lt;/code&gt; ，但是在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fragment&lt;/code&gt; 里面也有一个控件 ID 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;R.id.widget_btn&lt;/code&gt; ，那么在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fragment&lt;/code&gt; 里面使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;getActivity().findViewById()&lt;/code&gt; 时就无法取到正确的控件引用。&lt;/p&gt;

&lt;h3 id=&quot;0x09-webview-无法弹起-h5-中的-alert-和-comfirm-对话框的问题&quot;&gt;0x09 WebView 无法弹起 H5 中的 alert 和 comfirm 对话框的问题&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebView&lt;/code&gt; 是一个承载体，各种内容的渲染需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;WebViewChromClient&lt;/code&gt; 去实现，所以需要设置一个默认的 &lt;code class=&quot;highlighter-rouge&quot;&gt;WebChromeClient&lt;/code&gt; 实现。但是一般情况下实现自定义 &lt;code class=&quot;highlighter-rouge&quot;&gt;WebView&lt;/code&gt; 都会重写 &lt;code class=&quot;highlighter-rouge&quot;&gt;onAlert&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;onConfirm&lt;/code&gt; 方法，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertDialog&lt;/code&gt; 来展示 &lt;code class=&quot;highlighter-rouge&quot;&gt;H5&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;alert&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;confirm&lt;/code&gt; 对话框。&lt;/p&gt;

&lt;h3 id=&quot;0x10-gridview-中的-item-无法居中问题&quot;&gt;0x10 GridView 中的 Item 无法居中问题&lt;/h3&gt;

&lt;p&gt;查看一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;GridView&lt;/code&gt; 的布局文件是否设置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;android:scrollbarStyle=&quot;outsideInset&quot;&lt;/code&gt; 属性，如果有，去掉这个属性。&lt;/p&gt;

&lt;h3 id=&quot;0x11-edittext-textcursordrawable-属性直接用-color-在很多手机上光标是不会闪动&quot;&gt;0x11 EditText textCursorDrawable 属性直接用 color 在很多手机上光标是不会闪动&lt;/h3&gt;

&lt;p&gt;需要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;drawable&lt;/code&gt; 来设置这个属性，写一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;drawable&lt;/code&gt; 文件，例如&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;xmlns:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt; 			   	&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rectangle&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/white&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1dp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;0x12-在-listfragment-中-set-footer-后-javalangillegalstateexception问题&quot;&gt;0x12 在 ListFragment 中 set footer 后 java.lang.IllegalStateException问题&lt;/h3&gt;

&lt;p&gt;不要 &lt;code class=&quot;highlighter-rouge&quot;&gt;ListFragment&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;onCreateView()&lt;/code&gt; 中设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;footer&lt;/code&gt; ，要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;onActivityCreate()&lt;/code&gt; 中设置，否则会 &lt;code class=&quot;highlighter-rouge&quot;&gt;Caused by: java.lang.IllegalStateException: Content view not yet created&lt;/code&gt; 。&lt;/p&gt;

&lt;h3 id=&quot;0x13-开源项目-tabpageindicator-tab-默认情况只显示-6-个中文字符过多的字符被截断了&quot;&gt;0x13 开源项目 TabPageIndicator Tab 默认情况只显示 6 个中文字符，过多的字符被截断了&lt;/h3&gt;

&lt;p&gt;可修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;TabView&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;mMaxTabWidth&lt;/code&gt; 的值，默认时 &lt;code class=&quot;highlighter-rouge&quot;&gt;mMaxTabWidth = (int) (MeasureSpec.getSize(widthMeasureSpec) * 0.4f);&lt;/code&gt; 修改为 &lt;code class=&quot;highlighter-rouge&quot;&gt;mMaxTabWidth = (int) (MeasureSpec.getSize(widthMeasureSpec) * 1f);&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;0x14-spannablestringbuilder-修饰文本影响-listview-性能问题&quot;&gt;0x14 SpannableStringBuilder 修饰文本影响 ListView 性能问题&lt;/h3&gt;

&lt;p&gt;通常需要在一个列表中对 &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt; 的文本作一些特殊的修饰处理，例如对文本添加简单的图标，文本颜色，字体高亮等等效果，这时候 &lt;code class=&quot;highlighter-rouge&quot;&gt;SpannableStringBuilder&lt;/code&gt; 就可以帮上忙了。但如果在 &lt;code class=&quot;highlighter-rouge&quot;&gt;getView()&lt;/code&gt; 方法里构造 &lt;code class=&quot;highlighter-rouge&quot;&gt;Spannable&lt;/code&gt; 对象，明显会影响列表的展示的效率，应该在线程中先这些 &lt;code class=&quot;highlighter-rouge&quot;&gt;Spannable&lt;/code&gt; 数据构造好，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;getView()&lt;/code&gt; 尽量少做影响列表性能的操作。&lt;/p&gt;</content><author><name>hylinux</name></author><summary type="html">老司机为何能够成为老司机，不是因为开车开得多，而是撸多了…</summary></entry></feed>